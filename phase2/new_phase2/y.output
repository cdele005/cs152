State 74 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: /* empty */
    2        | func_loop func

    3 func_loop: /* empty */
    4          | func_loop func

    5 func: FUNCTION ident SEMICOLON param local body

    6 param: BEGIN_PARAMS declr_loop END_PARAMS

    7 local: BEGIN_LOCALS declr_loop END_LOCALS

    8 body: BEGIN_BODY stmt_loop stmt SEMICOLON END_BODY

    9 ident: IDENT

   10 number: NUMBER

   11 declr_loop: /* empty */
   12           | declr_loop declr SEMICOLON

   13 stmt_loop: /* empty */
   14          | stmt_loop stmt SEMICOLON

   15 declr: comma_loop ident COLON declr2 INTEGER

   16 comma_loop: /* empty */
   17           | comma_loop ident COMMA

   18 declr2: /* empty */
   19       | ARRAY L_SQUARE_BRACKET number R_SQUARE_BRACKET OF

   20 stmt: var ASSIGN expr
   21     | if_stmt
   22     | while_stmt
   23     | do_stmt
   24     | read_stmt
   25     | write_stmt
   26     | CONTINUE
   27     | RETURN expr

   28 if_stmt: IF bool_expr THEN stmt_loop stmt SEMICOLON else_stmt ENDIF

   29 else_stmt: /* empty */
   30          | ELSE stmt_loop stmt SEMICOLON

   31 while_stmt: WHILE bool_expr BEGINLOOP stmt_loop stmt SEMICOLON ENDLOOP

   32 do_stmt: DO BEGINLOOP stmt_loop stmt SEMICOLON ENDLOOP WHILE bool_expr

   33 read_stmt: READ var_loop var

   34 write_stmt: WRITE var_loop var

   35 var_loop: /* empty */
   36         | var_loop var COMMA

   37 bool_expr: rae_loop rae

   38 rae: re_loop re

   39 rae_loop: /* empty */
   40         | rae_loop rae OR

   41 re_loop: /* empty */
   42        | re_loop re AND

   43 re: not re2

   44 not: /* empty */
   45    | NOT

   46 re2: expr comp expr
   47    | TRUE
   48    | FALSE
   49    | L_PAREN bool_expr R_PAREN

   50 comp: EQ
   51     | NEQ
   52     | LT
   53     | GT
   54     | LTE
   55     | GTE

   56 expr: me_loop me

   57 me_loop: /* empty */
   58        | me_loop me ADD
   59        | me_loop me SUB

   60 me: term_loop term

   61 term_loop: /* empty */
   62          | term_loop term MULT
   63          | term_loop term DIV
   64          | term_loop term MOD

   65 term: SUB var
   66     | var
   67     | neg number
   68     | neg L_PAREN expr R_PAREN
   69     | term2

   70 term2: ident L_PAREN expr_loop R_PAREN

   71 neg: /* empty */
   72    | SUB

   73 expr_loop: /* empty */
   74          | expr_loop2 expr

   75 expr_loop2: /* empty */
   76           | expr_loop2 expr COMMA

   77 var: ident
   78    | ident L_SQUARE_BRACKET expr R_SQUARE_BRACKET


Terminals, with rules where they appear

$end (0) 0
error (256)
FUNCTION (258) 5
BEGIN_PARAMS (259) 6
END_PARAMS (260) 6
BEGIN_LOCALS (261) 7
END_LOCALS (262) 7
BEGIN_BODY (263) 8
END_BODY (264) 8
INTEGER (265) 15
ARRAY (266) 19
OF (267) 19
IF (268) 28
THEN (269) 28
ENDIF (270) 28
ELSE (271) 30
WHILE (272) 31 32
DO (273) 32
BEGINLOOP (274) 31 32
ENDLOOP (275) 31 32
CONTINUE (276) 26
READ (277) 33
WRITE (278) 34
AND (279) 42
OR (280) 40
NOT (281) 45
TRUE (282) 47
FALSE (283) 48
SUB (284) 59 65 72
ADD (285) 58
MULT (286) 62
DIV (287) 63
MOD (288) 64
EQ (289) 50
NEQ (290) 51
LT (291) 52
GT (292) 53
LTE (293) 54
GTE (294) 55
SEMICOLON (295) 5 8 12 14 28 30 31 32
COLON (296) 15
COMMA (297) 17 36 76
L_PAREN (298) 49 68 70
R_PAREN (299) 49 68 70
L_SQUARE_BRACKET (300) 19 78
R_SQUARE_BRACKET (301) 19 78
ASSIGN (302) 20
RETURN (303) 27
NUMBER (304) 10
IDENT (305) 9


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 1 2, on right: 0
func_loop (53)
    on left: 3 4, on right: 2 4
func (54)
    on left: 5, on right: 2 4
param (55)
    on left: 6, on right: 5
local (56)
    on left: 7, on right: 5
body (57)
    on left: 8, on right: 5
ident (58)
    on left: 9, on right: 5 15 17 70 77 78
number (59)
    on left: 10, on right: 19 67
declr_loop (60)
    on left: 11 12, on right: 6 7 12
stmt_loop (61)
    on left: 13 14, on right: 8 14 28 30 31 32
declr (62)
    on left: 15, on right: 12
comma_loop (63)
    on left: 16 17, on right: 15 17
declr2 (64)
    on left: 18 19, on right: 15
stmt (65)
    on left: 20 21 22 23 24 25 26 27, on right: 8 14 28 30 31 32
if_stmt (66)
    on left: 28, on right: 21
else_stmt (67)
    on left: 29 30, on right: 28
while_stmt (68)
    on left: 31, on right: 22
do_stmt (69)
    on left: 32, on right: 23
read_stmt (70)
    on left: 33, on right: 24
write_stmt (71)
    on left: 34, on right: 25
var_loop (72)
    on left: 35 36, on right: 33 34 36
bool_expr (73)
    on left: 37, on right: 28 31 32 49
rae (74)
    on left: 38, on right: 37 40
rae_loop (75)
    on left: 39 40, on right: 37 40
re_loop (76)
    on left: 41 42, on right: 38 42
re (77)
    on left: 43, on right: 38 42
not (78)
    on left: 44 45, on right: 43
re2 (79)
    on left: 46 47 48 49, on right: 43
comp (80)
    on left: 50 51 52 53 54 55, on right: 46
expr (81)
    on left: 56, on right: 20 27 46 68 74 76 78
me_loop (82)
    on left: 57 58 59, on right: 56 58 59
me (83)
    on left: 60, on right: 56 58 59
term_loop (84)
    on left: 61 62 63 64, on right: 60 62 63 64
term (85)
    on left: 65 66 67 68 69, on right: 60 62 63 64
term2 (86)
    on left: 70, on right: 69
neg (87)
    on left: 71 72, on right: 67 68
expr_loop (88)
    on left: 73 74, on right: 70
expr_loop2 (89)
    on left: 75 76, on right: 74 76
var (90)
    on left: 77 78, on right: 20 33 34 36 65 66


state 0

    0 $accept: . program $end

    FUNCTION  reduce using rule 3 (func_loop)
    $default  reduce using rule 1 (program)

    program    go to state 1
    func_loop  go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    2 program: func_loop . func
    4 func_loop: func_loop . func

    FUNCTION  shift, and go to state 4

    func  go to state 5


state 3

    0 $accept: program $end .

    $default  accept


state 4

    5 func: FUNCTION . ident SEMICOLON param local body

    IDENT  shift, and go to state 6

    ident  go to state 7


state 5

    2 program: func_loop func .
    4 func_loop: func_loop func .

    FUNCTION  reduce using rule 4 (func_loop)
    $default  reduce using rule 2 (program)


state 6

    9 ident: IDENT .

    $default  reduce using rule 9 (ident)


state 7

    5 func: FUNCTION ident . SEMICOLON param local body

    SEMICOLON  shift, and go to state 8


state 8

    5 func: FUNCTION ident SEMICOLON . param local body

    BEGIN_PARAMS  shift, and go to state 9

    param  go to state 10


state 9

    6 param: BEGIN_PARAMS . declr_loop END_PARAMS

    $default  reduce using rule 11 (declr_loop)

    declr_loop  go to state 11


state 10

    5 func: FUNCTION ident SEMICOLON param . local body

    BEGIN_LOCALS  shift, and go to state 12

    local  go to state 13


state 11

    6 param: BEGIN_PARAMS declr_loop . END_PARAMS
   12 declr_loop: declr_loop . declr SEMICOLON

    END_PARAMS  shift, and go to state 14

    $default  reduce using rule 16 (comma_loop)

    declr       go to state 15
    comma_loop  go to state 16


state 12

    7 local: BEGIN_LOCALS . declr_loop END_LOCALS

    $default  reduce using rule 11 (declr_loop)

    declr_loop  go to state 17


state 13

    5 func: FUNCTION ident SEMICOLON param local . body

    BEGIN_BODY  shift, and go to state 18

    body  go to state 19


state 14

    6 param: BEGIN_PARAMS declr_loop END_PARAMS .

    $default  reduce using rule 6 (param)


state 15

   12 declr_loop: declr_loop declr . SEMICOLON

    SEMICOLON  shift, and go to state 20


state 16

   15 declr: comma_loop . ident COLON declr2 INTEGER
   17 comma_loop: comma_loop . ident COMMA

    IDENT  shift, and go to state 6

    ident  go to state 21


state 17

    7 local: BEGIN_LOCALS declr_loop . END_LOCALS
   12 declr_loop: declr_loop . declr SEMICOLON

    END_LOCALS  shift, and go to state 22

    $default  reduce using rule 16 (comma_loop)

    declr       go to state 15
    comma_loop  go to state 16


state 18

    8 body: BEGIN_BODY . stmt_loop stmt SEMICOLON END_BODY

    $default  reduce using rule 13 (stmt_loop)

    stmt_loop  go to state 23


state 19

    5 func: FUNCTION ident SEMICOLON param local body .

    $default  reduce using rule 5 (func)


state 20

   12 declr_loop: declr_loop declr SEMICOLON .

    $default  reduce using rule 12 (declr_loop)


state 21

   15 declr: comma_loop ident . COLON declr2 INTEGER
   17 comma_loop: comma_loop ident . COMMA

    COLON  shift, and go to state 24
    COMMA  shift, and go to state 25


state 22

    7 local: BEGIN_LOCALS declr_loop END_LOCALS .

    $default  reduce using rule 7 (local)


state 23

    8 body: BEGIN_BODY stmt_loop . stmt SEMICOLON END_BODY
   14 stmt_loop: stmt_loop . stmt SEMICOLON

    IF        shift, and go to state 26
    WHILE     shift, and go to state 27
    DO        shift, and go to state 28
    CONTINUE  shift, and go to state 29
    READ      shift, and go to state 30
    WRITE     shift, and go to state 31
    RETURN    shift, and go to state 32
    IDENT     shift, and go to state 6

    ident       go to state 33
    stmt        go to state 34
    if_stmt     go to state 35
    while_stmt  go to state 36
    do_stmt     go to state 37
    read_stmt   go to state 38
    write_stmt  go to state 39
    var         go to state 40


state 24

   15 declr: comma_loop ident COLON . declr2 INTEGER

    ARRAY  shift, and go to state 41

    $default  reduce using rule 18 (declr2)

    declr2  go to state 42


state 25

   17 comma_loop: comma_loop ident COMMA .

    $default  reduce using rule 17 (comma_loop)


state 26

   28 if_stmt: IF . bool_expr THEN stmt_loop stmt SEMICOLON else_stmt ENDIF

    $default  reduce using rule 39 (rae_loop)

    bool_expr  go to state 43
    rae_loop   go to state 44


state 27

   31 while_stmt: WHILE . bool_expr BEGINLOOP stmt_loop stmt SEMICOLON ENDLOOP

    $default  reduce using rule 39 (rae_loop)

    bool_expr  go to state 45
    rae_loop   go to state 44


state 28

   32 do_stmt: DO . BEGINLOOP stmt_loop stmt SEMICOLON ENDLOOP WHILE bool_expr

    BEGINLOOP  shift, and go to state 46


state 29

   26 stmt: CONTINUE .

    $default  reduce using rule 26 (stmt)


state 30

   33 read_stmt: READ . var_loop var

    $default  reduce using rule 35 (var_loop)

    var_loop  go to state 47


state 31

   34 write_stmt: WRITE . var_loop var

    $default  reduce using rule 35 (var_loop)

    var_loop  go to state 48


state 32

   27 stmt: RETURN . expr

    $default  reduce using rule 57 (me_loop)

    expr     go to state 49
    me_loop  go to state 50


state 33

   77 var: ident .
   78    | ident . L_SQUARE_BRACKET expr R_SQUARE_BRACKET

    L_SQUARE_BRACKET  shift, and go to state 51

    $default  reduce using rule 77 (var)


state 34

    8 body: BEGIN_BODY stmt_loop stmt . SEMICOLON END_BODY
   14 stmt_loop: stmt_loop stmt . SEMICOLON

    SEMICOLON  shift, and go to state 52


state 35

   21 stmt: if_stmt .

    $default  reduce using rule 21 (stmt)


state 36

   22 stmt: while_stmt .

    $default  reduce using rule 22 (stmt)


state 37

   23 stmt: do_stmt .

    $default  reduce using rule 23 (stmt)


state 38

   24 stmt: read_stmt .

    $default  reduce using rule 24 (stmt)


state 39

   25 stmt: write_stmt .

    $default  reduce using rule 25 (stmt)


state 40

   20 stmt: var . ASSIGN expr

    ASSIGN  shift, and go to state 53


state 41

   19 declr2: ARRAY . L_SQUARE_BRACKET number R_SQUARE_BRACKET OF

    L_SQUARE_BRACKET  shift, and go to state 54


state 42

   15 declr: comma_loop ident COLON declr2 . INTEGER

    INTEGER  shift, and go to state 55


state 43

   28 if_stmt: IF bool_expr . THEN stmt_loop stmt SEMICOLON else_stmt ENDIF

    THEN  shift, and go to state 56


state 44

   37 bool_expr: rae_loop . rae
   40 rae_loop: rae_loop . rae OR

    $default  reduce using rule 41 (re_loop)

    rae      go to state 57
    re_loop  go to state 58


state 45

   31 while_stmt: WHILE bool_expr . BEGINLOOP stmt_loop stmt SEMICOLON ENDLOOP

    BEGINLOOP  shift, and go to state 59


state 46

   32 do_stmt: DO BEGINLOOP . stmt_loop stmt SEMICOLON ENDLOOP WHILE bool_expr

    $default  reduce using rule 13 (stmt_loop)

    stmt_loop  go to state 60


state 47

   33 read_stmt: READ var_loop . var
   36 var_loop: var_loop . var COMMA

    IDENT  shift, and go to state 6

    ident  go to state 33
    var    go to state 61


state 48

   34 write_stmt: WRITE var_loop . var
   36 var_loop: var_loop . var COMMA

    IDENT  shift, and go to state 6

    ident  go to state 33
    var    go to state 62


state 49

   27 stmt: RETURN expr .

    $default  reduce using rule 27 (stmt)


state 50

   56 expr: me_loop . me
   58 me_loop: me_loop . me ADD
   59        | me_loop . me SUB

    $default  reduce using rule 61 (term_loop)

    me         go to state 63
    term_loop  go to state 64


state 51

   78 var: ident L_SQUARE_BRACKET . expr R_SQUARE_BRACKET

    $default  reduce using rule 57 (me_loop)

    expr     go to state 65
    me_loop  go to state 50


state 52

    8 body: BEGIN_BODY stmt_loop stmt SEMICOLON . END_BODY
   14 stmt_loop: stmt_loop stmt SEMICOLON .

    END_BODY  shift, and go to state 66

    $default  reduce using rule 14 (stmt_loop)


state 53

   20 stmt: var ASSIGN . expr

    $default  reduce using rule 57 (me_loop)

    expr     go to state 67
    me_loop  go to state 50


state 54

   19 declr2: ARRAY L_SQUARE_BRACKET . number R_SQUARE_BRACKET OF

    NUMBER  shift, and go to state 68

    number  go to state 69


state 55

   15 declr: comma_loop ident COLON declr2 INTEGER .

    $default  reduce using rule 15 (declr)


state 56

   28 if_stmt: IF bool_expr THEN . stmt_loop stmt SEMICOLON else_stmt ENDIF

    $default  reduce using rule 13 (stmt_loop)

    stmt_loop  go to state 70


state 57

   37 bool_expr: rae_loop rae .
   40 rae_loop: rae_loop rae . OR

    OR  shift, and go to state 71

    $default  reduce using rule 37 (bool_expr)


state 58

   38 rae: re_loop . re
   42 re_loop: re_loop . re AND

    NOT  shift, and go to state 72

    $default  reduce using rule 44 (not)

    re   go to state 73
    not  go to state 74


state 59

   31 while_stmt: WHILE bool_expr BEGINLOOP . stmt_loop stmt SEMICOLON ENDLOOP

    $default  reduce using rule 13 (stmt_loop)

    stmt_loop  go to state 75


state 60

   14 stmt_loop: stmt_loop . stmt SEMICOLON
   32 do_stmt: DO BEGINLOOP stmt_loop . stmt SEMICOLON ENDLOOP WHILE bool_expr

    IF        shift, and go to state 26
    WHILE     shift, and go to state 27
    DO        shift, and go to state 28
    CONTINUE  shift, and go to state 29
    READ      shift, and go to state 30
    WRITE     shift, and go to state 31
    RETURN    shift, and go to state 32
    IDENT     shift, and go to state 6

    ident       go to state 33
    stmt        go to state 76
    if_stmt     go to state 35
    while_stmt  go to state 36
    do_stmt     go to state 37
    read_stmt   go to state 38
    write_stmt  go to state 39
    var         go to state 40


state 61

   33 read_stmt: READ var_loop var .
   36 var_loop: var_loop var . COMMA

    COMMA  shift, and go to state 77

    $default  reduce using rule 33 (read_stmt)


state 62

   34 write_stmt: WRITE var_loop var .
   36 var_loop: var_loop var . COMMA

    COMMA  shift, and go to state 77

    $default  reduce using rule 34 (write_stmt)


state 63

   56 expr: me_loop me .
   58 me_loop: me_loop me . ADD
   59        | me_loop me . SUB

    SUB  shift, and go to state 78
    ADD  shift, and go to state 79

    $default  reduce using rule 56 (expr)


state 64

   60 me: term_loop . term
   62 term_loop: term_loop . term MULT
   63          | term_loop . term DIV
   64          | term_loop . term MOD

    SUB    shift, and go to state 80
    IDENT  shift, and go to state 6

    $default  reduce using rule 71 (neg)

    ident  go to state 81
    term   go to state 82
    term2  go to state 83
    neg    go to state 84
    var    go to state 85


state 65

   78 var: ident L_SQUARE_BRACKET expr . R_SQUARE_BRACKET

    R_SQUARE_BRACKET  shift, and go to state 86


state 66

    8 body: BEGIN_BODY stmt_loop stmt SEMICOLON END_BODY .

    $default  reduce using rule 8 (body)


state 67

   20 stmt: var ASSIGN expr .

    $default  reduce using rule 20 (stmt)


state 68

   10 number: NUMBER .

    $default  reduce using rule 10 (number)


state 69

   19 declr2: ARRAY L_SQUARE_BRACKET number . R_SQUARE_BRACKET OF

    R_SQUARE_BRACKET  shift, and go to state 87


state 70

   14 stmt_loop: stmt_loop . stmt SEMICOLON
   28 if_stmt: IF bool_expr THEN stmt_loop . stmt SEMICOLON else_stmt ENDIF

    IF        shift, and go to state 26
    WHILE     shift, and go to state 27
    DO        shift, and go to state 28
    CONTINUE  shift, and go to state 29
    READ      shift, and go to state 30
    WRITE     shift, and go to state 31
    RETURN    shift, and go to state 32
    IDENT     shift, and go to state 6

    ident       go to state 33
    stmt        go to state 88
    if_stmt     go to state 35
    while_stmt  go to state 36
    do_stmt     go to state 37
    read_stmt   go to state 38
    write_stmt  go to state 39
    var         go to state 40


state 71

   40 rae_loop: rae_loop rae OR .

    $default  reduce using rule 40 (rae_loop)


state 72

   45 not: NOT .

    $default  reduce using rule 45 (not)


state 73

   38 rae: re_loop re .
   42 re_loop: re_loop re . AND

    AND  shift, and go to state 89

    $default  reduce using rule 38 (rae)


state 74

   43 re: not . re2

    TRUE     shift, and go to state 90
    FALSE    shift, and go to state 91
    L_PAREN  shift, and go to state 92

    L_PAREN   [reduce using rule 57 (me_loop)]
    $default  reduce using rule 57 (me_loop)

    re2      go to state 93
    expr     go to state 94
    me_loop  go to state 50


state 75

   14 stmt_loop: stmt_loop . stmt SEMICOLON
   31 while_stmt: WHILE bool_expr BEGINLOOP stmt_loop . stmt SEMICOLON ENDLOOP

    IF        shift, and go to state 26
    WHILE     shift, and go to state 27
    DO        shift, and go to state 28
    CONTINUE  shift, and go to state 29
    READ      shift, and go to state 30
    WRITE     shift, and go to state 31
    RETURN    shift, and go to state 32
    IDENT     shift, and go to state 6

    ident       go to state 33
    stmt        go to state 95
    if_stmt     go to state 35
    while_stmt  go to state 36
    do_stmt     go to state 37
    read_stmt   go to state 38
    write_stmt  go to state 39
    var         go to state 40


state 76

   14 stmt_loop: stmt_loop stmt . SEMICOLON
   32 do_stmt: DO BEGINLOOP stmt_loop stmt . SEMICOLON ENDLOOP WHILE bool_expr

    SEMICOLON  shift, and go to state 96


state 77

   36 var_loop: var_loop var COMMA .

    $default  reduce using rule 36 (var_loop)


state 78

   59 me_loop: me_loop me SUB .

    $default  reduce using rule 59 (me_loop)


state 79

   58 me_loop: me_loop me ADD .

    $default  reduce using rule 58 (me_loop)


state 80

   65 term: SUB . var
   72 neg: SUB .

    IDENT  shift, and go to state 6

    $default  reduce using rule 72 (neg)

    ident  go to state 33
    var    go to state 97


state 81

   70 term2: ident . L_PAREN expr_loop R_PAREN
   77 var: ident .
   78    | ident . L_SQUARE_BRACKET expr R_SQUARE_BRACKET

    L_PAREN           shift, and go to state 98
    L_SQUARE_BRACKET  shift, and go to state 51

    $default  reduce using rule 77 (var)


state 82

   60 me: term_loop term .
   62 term_loop: term_loop term . MULT
   63          | term_loop term . DIV
   64          | term_loop term . MOD

    MULT  shift, and go to state 99
    DIV   shift, and go to state 100
    MOD   shift, and go to state 101

    $default  reduce using rule 60 (me)


state 83

   69 term: term2 .

    $default  reduce using rule 69 (term)


state 84

   67 term: neg . number
   68     | neg . L_PAREN expr R_PAREN

    L_PAREN  shift, and go to state 102
    NUMBER   shift, and go to state 68

    number  go to state 103


state 85

   66 term: var .

    $default  reduce using rule 66 (term)


state 86

   78 var: ident L_SQUARE_BRACKET expr R_SQUARE_BRACKET .

    $default  reduce using rule 78 (var)


state 87

   19 declr2: ARRAY L_SQUARE_BRACKET number R_SQUARE_BRACKET . OF

    OF  shift, and go to state 104


state 88

   14 stmt_loop: stmt_loop stmt . SEMICOLON
   28 if_stmt: IF bool_expr THEN stmt_loop stmt . SEMICOLON else_stmt ENDIF

    SEMICOLON  shift, and go to state 105


state 89

   42 re_loop: re_loop re AND .

    $default  reduce using rule 42 (re_loop)


state 90

   47 re2: TRUE .

    $default  reduce using rule 47 (re2)


state 91

   48 re2: FALSE .

    $default  reduce using rule 48 (re2)


state 92

   49 re2: L_PAREN . bool_expr R_PAREN

    $default  reduce using rule 39 (rae_loop)

    bool_expr  go to state 106
    rae_loop   go to state 44


state 93

   43 re: not re2 .

    $default  reduce using rule 43 (re)


state 94

   46 re2: expr . comp expr

    EQ   shift, and go to state 107
    NEQ  shift, and go to state 108
    LT   shift, and go to state 109
    GT   shift, and go to state 110
    LTE  shift, and go to state 111
    GTE  shift, and go to state 112

    comp  go to state 113


state 95

   14 stmt_loop: stmt_loop stmt . SEMICOLON
   31 while_stmt: WHILE bool_expr BEGINLOOP stmt_loop stmt . SEMICOLON ENDLOOP

    SEMICOLON  shift, and go to state 114


state 96

   14 stmt_loop: stmt_loop stmt SEMICOLON .
   32 do_stmt: DO BEGINLOOP stmt_loop stmt SEMICOLON . ENDLOOP WHILE bool_expr

    ENDLOOP  shift, and go to state 115

    $default  reduce using rule 14 (stmt_loop)


state 97

   65 term: SUB var .

    $default  reduce using rule 65 (term)


state 98

   70 term2: ident L_PAREN . expr_loop R_PAREN

    R_PAREN   reduce using rule 73 (expr_loop)
    $default  reduce using rule 75 (expr_loop2)

    expr_loop   go to state 116
    expr_loop2  go to state 117


state 99

   62 term_loop: term_loop term MULT .

    $default  reduce using rule 62 (term_loop)


state 100

   63 term_loop: term_loop term DIV .

    $default  reduce using rule 63 (term_loop)


state 101

   64 term_loop: term_loop term MOD .

    $default  reduce using rule 64 (term_loop)


state 102

   68 term: neg L_PAREN . expr R_PAREN

    $default  reduce using rule 57 (me_loop)

    expr     go to state 118
    me_loop  go to state 50


state 103

   67 term: neg number .

    $default  reduce using rule 67 (term)


state 104

   19 declr2: ARRAY L_SQUARE_BRACKET number R_SQUARE_BRACKET OF .

    $default  reduce using rule 19 (declr2)


state 105

   14 stmt_loop: stmt_loop stmt SEMICOLON .
   28 if_stmt: IF bool_expr THEN stmt_loop stmt SEMICOLON . else_stmt ENDIF

    ELSE  shift, and go to state 119

    ENDIF     reduce using rule 29 (else_stmt)
    $default  reduce using rule 14 (stmt_loop)

    else_stmt  go to state 120


state 106

   49 re2: L_PAREN bool_expr . R_PAREN

    R_PAREN  shift, and go to state 121


state 107

   50 comp: EQ .

    $default  reduce using rule 50 (comp)


state 108

   51 comp: NEQ .

    $default  reduce using rule 51 (comp)


state 109

   52 comp: LT .

    $default  reduce using rule 52 (comp)


state 110

   53 comp: GT .

    $default  reduce using rule 53 (comp)


state 111

   54 comp: LTE .

    $default  reduce using rule 54 (comp)


state 112

   55 comp: GTE .

    $default  reduce using rule 55 (comp)


state 113

   46 re2: expr comp . expr

    $default  reduce using rule 57 (me_loop)

    expr     go to state 122
    me_loop  go to state 50


state 114

   14 stmt_loop: stmt_loop stmt SEMICOLON .
   31 while_stmt: WHILE bool_expr BEGINLOOP stmt_loop stmt SEMICOLON . ENDLOOP

    ENDLOOP  shift, and go to state 123

    $default  reduce using rule 14 (stmt_loop)


state 115

   32 do_stmt: DO BEGINLOOP stmt_loop stmt SEMICOLON ENDLOOP . WHILE bool_expr

    WHILE  shift, and go to state 124


state 116

   70 term2: ident L_PAREN expr_loop . R_PAREN

    R_PAREN  shift, and go to state 125


state 117

   74 expr_loop: expr_loop2 . expr
   76 expr_loop2: expr_loop2 . expr COMMA

    $default  reduce using rule 57 (me_loop)

    expr     go to state 126
    me_loop  go to state 50


state 118

   68 term: neg L_PAREN expr . R_PAREN

    R_PAREN  shift, and go to state 127


state 119

   30 else_stmt: ELSE . stmt_loop stmt SEMICOLON

    $default  reduce using rule 13 (stmt_loop)

    stmt_loop  go to state 128


state 120

   28 if_stmt: IF bool_expr THEN stmt_loop stmt SEMICOLON else_stmt . ENDIF

    ENDIF  shift, and go to state 129


state 121

   49 re2: L_PAREN bool_expr R_PAREN .

    $default  reduce using rule 49 (re2)


state 122

   46 re2: expr comp expr .

    $default  reduce using rule 46 (re2)


state 123

   31 while_stmt: WHILE bool_expr BEGINLOOP stmt_loop stmt SEMICOLON ENDLOOP .

    $default  reduce using rule 31 (while_stmt)


state 124

   32 do_stmt: DO BEGINLOOP stmt_loop stmt SEMICOLON ENDLOOP WHILE . bool_expr

    $default  reduce using rule 39 (rae_loop)

    bool_expr  go to state 130
    rae_loop   go to state 44


state 125

   70 term2: ident L_PAREN expr_loop R_PAREN .

    $default  reduce using rule 70 (term2)


state 126

   74 expr_loop: expr_loop2 expr .
   76 expr_loop2: expr_loop2 expr . COMMA

    COMMA  shift, and go to state 131

    $default  reduce using rule 74 (expr_loop)


state 127

   68 term: neg L_PAREN expr R_PAREN .

    $default  reduce using rule 68 (term)


state 128

   14 stmt_loop: stmt_loop . stmt SEMICOLON
   30 else_stmt: ELSE stmt_loop . stmt SEMICOLON

    IF        shift, and go to state 26
    WHILE     shift, and go to state 27
    DO        shift, and go to state 28
    CONTINUE  shift, and go to state 29
    READ      shift, and go to state 30
    WRITE     shift, and go to state 31
    RETURN    shift, and go to state 32
    IDENT     shift, and go to state 6

    ident       go to state 33
    stmt        go to state 132
    if_stmt     go to state 35
    while_stmt  go to state 36
    do_stmt     go to state 37
    read_stmt   go to state 38
    write_stmt  go to state 39
    var         go to state 40


state 129

   28 if_stmt: IF bool_expr THEN stmt_loop stmt SEMICOLON else_stmt ENDIF .

    $default  reduce using rule 28 (if_stmt)


state 130

   32 do_stmt: DO BEGINLOOP stmt_loop stmt SEMICOLON ENDLOOP WHILE bool_expr .

    $default  reduce using rule 32 (do_stmt)


state 131

   76 expr_loop2: expr_loop2 expr COMMA .

    $default  reduce using rule 76 (expr_loop2)


state 132

   14 stmt_loop: stmt_loop stmt . SEMICOLON
   30 else_stmt: ELSE stmt_loop stmt . SEMICOLON

    SEMICOLON  shift, and go to state 133


state 133

   14 stmt_loop: stmt_loop stmt SEMICOLON .
   30 else_stmt: ELSE stmt_loop stmt SEMICOLON .

    ENDIF     reduce using rule 30 (else_stmt)
    $default  reduce using rule 14 (stmt_loop)
